
☑ ❓
Remove Custom Hook

Update code to mimic asynchronous data fetching:

 Below the todoList state, define a useEffect React hook with an empty dependency list
 Inside the side-effect handler function, define a new Promise and pass in a callback function with parameters resolve and reject
 hint: Promise() constructor
 To mimic a loading delay, inside the callback function declare a timeout (hint: setTimeout method) with the following arguments:
 callback: function with no parameters
 delay time: 2000 milliseconds (2 seconds)
 Inside the timeout callback function, call the parameter resolve which is a callback function for when the Promise is successful and pass it an Object with property data as a nested empty Object
 Inside the data object, add a property todoList and set it's value to the initial/default list state (copy from useState hook)
 Update the default state for todoList to be an empty Array
 View your application in the browser
 Notice that the Todo List is now empty and doesn't persist after refresh
So what's missing? We are retrieving our list from localStorage but we aren't updating our todoList state with the data so it remains empty. Let's fix that:

 Chain a then method to your Promise constructor and pass it a function with parameter result
 Inside the function, use your state setter to update the list and pass the todoList from your result object
 View your application in the browser
You'll notice now that the list is being saved in localStorage but after refreshing the page it is reset to empty. This is because our other side-effect is overwriting the data before the asynchronous fetch is complete.

We need a way to know that the data is still loading before trying to update it in localStorage.









   React.useEffect(()=> {
    Promise((resolve, reject) => {
      setTimeout(()=>{
        resolve({
          data:{
           todoList: JSON.parse(localStorage.getItem('savedTodoList'))
            }
          }  
      )
    }, 2000)
    })
    .then(result => setTodoListState(result))
  }, []);

  React.useEffect(()=>{
    if(!isLoading){
      localStorage.setItem('savedTodoList', JSON.stringify(todoListState))
    }
  })