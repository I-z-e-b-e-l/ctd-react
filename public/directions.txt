
☑ ❓

Save your list in local browser storage so it persists between page loads:

 Open /src/App.js

 ☑ Define a useEffect React hook with todoList as a dependency
 
☑  Inside the side-effect handler function, save the todoList inside localStorage with the key "savedTodoList"

    ☑ Hint: localStorage.setItem method

 Run your application and view in browser

 Enter a new todo in "Add Todo" form and submit:
    Open your Local Storage panel in the DevTools

    In Chrome: DevTools > Application > Local Storage > localhost

    Verify that your "savedTodoList" item exists

    Notice that the value, however, is not readable (see below)

 Open /src/App.js

 ☑ Update your side-effect function to convert todoList to a string before saving in localStorage

☑ Hint: JSON.stringify method

 View your application in browser
 Clear your Local Storage
In Chrome: DevTools > Application > Storage > Click "Clear site data"
 Repeat the same steps from above
 Notice that the value is completely readable as a string (see below) <pic>

 Now your list is saved in Local Storage, but when you refresh the page? It still disappears!

This is because we wrote the list data to Local Storage but we aren't reading it when the application is rendered. Let's fix that:

 Open /src/App.js

 Update the default state for todoList to read your "savedTodoList" item from localStorage

Hint: localStorage.getItem method

 View your application in browser
 Notice that there is an error, todoList is not an Array
How could our list not be an Array? Right! We turned it into a string before saving in Local Storage. So now that we're ready to use the value, we need to turn it back into an Array.

 Open /src/App.js

 Update your default state to parse the value of the "savedTodoList" item using the JSON.parse method

 View your application in browser
 Notice that your previous todo item(s) are still visible after refreshing the page
 